// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var JestDom = require("bs-jest-dom/lib/js/src/JestDom.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var DomTestingLibrary = require("../src/DomTestingLibrary.js");

var render = (function(html) {
    const body = document.querySelector('body', document)
    body.innerHTML = html
    return body
  });

var renderWithDelay = (function(html, delay) {
    const body = document.querySelector('body')
    setTimeout(() => {
      body.innerHTML = html
    }, delay)
    return body
  });

function then_(promise, fn) {
  return promise.then(Curry.__1(fn));
}

var $$Promise = {
  then_: then_
};

Jest.test("getByLabel", (function (param) {
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByLabelText(render("<label for=\"title\">Title</label><input type=\"text\" id=\"title\" />"), {
                            NAME: "Str",
                            VAL: "Title"
                          })));
      }));

Jest.test("getByText", (function (param) {
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByText(undefined, render("<span>Hello world</span>"), {
                            NAME: "Str",
                            VAL: "Hello world"
                          })));
      }));

Jest.test("getByText (with exact as false)", (function (param) {
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByText(DomTestingLibrary.makeByTextOptions(undefined, false, undefined, undefined, undefined), render("<span>Hello world</span>"), {
                            NAME: "Str",
                            VAL: "hello world"
                          })));
      }));

Jest.test("getByRole using regex", (function (param) {
        var options = DomTestingLibrary.makeOptionsWithRegex(undefined, undefined, Caml_option.some(new RegExp("color green", "i")), undefined);
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByRole(options, {
                            NAME: "Str",
                            VAL: "option"
                          }, render("<option role=\"option\">Color Green</option>"))));
      }));

Jest.test("getByRole using function", (function (param) {
        var options = DomTestingLibrary.makeOptionsWithFunction(undefined, undefined, (function (content, _element) {
                return content === "Color Green";
              }), undefined);
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByRole(options, {
                            NAME: "Str",
                            VAL: "option"
                          }, render("<option role=\"option\">Color Green</option>"))));
      }));

Jest.test("getByPlaceholderText", (function (param) {
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByPlaceholderText(render("<input type=\"text\" placeholder=\"title\" />"), {
                            NAME: "Str",
                            VAL: "title"
                          })));
      }));

Jest.test("getByDisplayValue", (function (param) {
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByDisplayValue(render("<input type=\"text\" placeholder=\"title\" value=\"Red\" />"), {
                            NAME: "Str",
                            VAL: "Red"
                          })));
      }));

Jest.test("getByAltText", (function (param) {
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByAltText(render("<img alt=\"alt text example\" />"), {
                            NAME: "Str",
                            VAL: "alt text example"
                          })));
      }));

Jest.test("getByTitle", (function (param) {
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByTitle(render("<span title=\"title example\" />"), {
                            NAME: "Str",
                            VAL: "title example"
                          })));
      }));

Jest.test("getByTestId", (function (param) {
        return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByTestId(render("<div data-testid=\"test-id\">Test ID</div>"), {
                            NAME: "Str",
                            VAL: "test-id"
                          })));
      }));

Jest.testPromise("findByLabel", undefined, (function (param) {
        var promise = DomTestingLibrary.findByLabelText(render("<label for=\"title\">Title</label><input type=\"text\" id=\"title\" />"), {
              NAME: "Str",
              VAL: "Title"
            });
        return promise.then(function (actual) {
                    return Promise.resolve(JestDom.toBeInTheDocument(expect(actual)));
                  });
      }));

Jest.testPromise("findByText", undefined, (function (param) {
        var promise = DomTestingLibrary.findByText(undefined, {
              NAME: "Str",
              VAL: "Hello world"
            }, render("<span>Hello world</span>"));
        return promise.then(function (el) {
                    return Promise.resolve(JestDom.toBeInTheDocument(expect(el)));
                  });
      }));

Jest.testPromise("findByRole", undefined, (function (param) {
        var options = DomTestingLibrary.makeOptions(undefined, undefined, "Red Color", undefined);
        var promise = DomTestingLibrary.findByRole(options, {
              NAME: "Str",
              VAL: "option"
            }, render("<option role=\"option\">Red Color</option>"));
        return promise.then(function (el) {
                    return Promise.resolve(JestDom.toBeInTheDocument(expect(el)));
                  });
      }));

Jest.testPromise("findByPlaceholderText", undefined, (function (param) {
        var promise = DomTestingLibrary.findByPlaceholderText(render("<input type=\"text\" placeholder=\"title\" />"), {
              NAME: "Str",
              VAL: "title"
            });
        return promise.then(function (el) {
                    return Promise.resolve(JestDom.toBeInTheDocument(expect(el)));
                  });
      }));

Jest.testPromise("findByDisplayValue", undefined, (function (param) {
        var promise = DomTestingLibrary.findByDisplayValue(render("<input type=\"text\" placeholder=\"title\" value=\"Red\" />"), {
              NAME: "Str",
              VAL: "Red"
            });
        return promise.then(function (el) {
                    return Promise.resolve(JestDom.toBeInTheDocument(expect(el)));
                  });
      }));

Jest.testPromise("findByAltText", undefined, (function (param) {
        var promise = DomTestingLibrary.findByAltText(render("<img alt=\"alt text example\" />"), {
              NAME: "Str",
              VAL: "alt text example"
            });
        return promise.then(function (el) {
                    return Promise.resolve(JestDom.toBeInTheDocument(expect(el)));
                  });
      }));

Jest.testPromise("findByTitle", undefined, (function (param) {
        var promise = DomTestingLibrary.findByTitle(render("<span title=\"title example\" />"), {
              NAME: "Str",
              VAL: "title example"
            });
        return promise.then(function (el) {
                    return Promise.resolve(JestDom.toBeInTheDocument(expect(el)));
                  });
      }));

Jest.testPromise("findByTestId", undefined, (function (param) {
        var promise = DomTestingLibrary.findByTestId(render("<div data-testid=\"test-id\">Test ID</div>"), {
              NAME: "Str",
              VAL: "test-id"
            });
        return promise.then(function (el) {
                    return Promise.resolve(JestDom.toBeInTheDocument(expect(el)));
                  });
      }));

Jest.testPromise("waitFor", undefined, (function (param) {
        return DomTestingLibrary.waitFor(function (param) {
                    return JestDom.toBeInTheDocument(expect(DomTestingLibrary.getByTestId(renderWithDelay("<div data-testid=\"test-id\">Test ID</div>", 200), {
                                        NAME: "Str",
                                        VAL: "test-id"
                                      })));
                  });
      }));

exports.render = render;
exports.renderWithDelay = renderWithDelay;
exports.$$Promise = $$Promise;
/*  Not a pure module */
