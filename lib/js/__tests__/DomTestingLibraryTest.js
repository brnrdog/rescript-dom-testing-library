// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var DomTestingLibrary__Queries = require("../src/DomTestinLibrary__Queries/DomTestingLibrary__Queries.js");

var render = (function(html) {
    const body = document.createElement('body', document)
    body.innerHTML = html
    return body
  });

function matchSnapshot(actual) {
  return Promise.resolve(Jest.Expect.toMatchSnapshot(Jest.Expect.expect(actual)));
}

function then_(promise, fn) {
  return promise.then(Curry.__1(fn));
}

var $$Promise$1 = {
  then_: then_
};

Jest.testPromise("findByLabel", undefined, (function (param) {
        var promise = DomTestingLibrary__Queries.findByLabelText(render("<label for=\"title\">Title</label><input type=\"text\" id=\"title\" />"), {
              NAME: "Str",
              VAL: "Title"
            });
        return promise.then(matchSnapshot);
      }));

Jest.testPromise("findByText", undefined, (function (param) {
        var promise = DomTestingLibrary__Queries.findByText(render("<span>Hello world</span>"), {
              NAME: "Str",
              VAL: "Hello world"
            });
        return promise.then(matchSnapshot);
      }));

Jest.testPromise("findByRole", undefined, (function (param) {
        var promise = DomTestingLibrary__Queries.findByRole(render("<option role=\"option\">Option</option>"), {
              NAME: "Str",
              VAL: "option"
            });
        return promise.then(matchSnapshot);
      }));

Jest.testPromise("findByPlaceholderText", undefined, (function (param) {
        var promise = DomTestingLibrary__Queries.findByPlaceholderText(render("<input type=\"text\" placeholder=\"title\" />"), {
              NAME: "Str",
              VAL: "title"
            });
        return promise.then(matchSnapshot);
      }));

Jest.testPromise("findByDisplayValue", undefined, (function (param) {
        var promise = DomTestingLibrary__Queries.findByDisplayValue(render("<input type=\"text\" placeholder=\"title\" value=\"Red\" />"), {
              NAME: "Str",
              VAL: "Red"
            });
        return promise.then(matchSnapshot);
      }));

Jest.testPromise("findByAltText", undefined, (function (param) {
        var promise = DomTestingLibrary__Queries.findByAltText(render("<img alt=\"alt text example\" />"), {
              NAME: "Str",
              VAL: "alt text example"
            });
        return promise.then(matchSnapshot);
      }));

Jest.testPromise("findByTitle", undefined, (function (param) {
        var promise = DomTestingLibrary__Queries.findByTitle(render("<span title=\"title example\" />"), {
              NAME: "Str",
              VAL: "title example"
            });
        return promise.then(matchSnapshot);
      }));

Jest.testPromise("findByTestId", undefined, (function (param) {
        var promise = DomTestingLibrary__Queries.findByTestId(render("<div data-testid=\"test-id\">Test ID</div>"), {
              NAME: "Str",
              VAL: "test-id"
            });
        return promise.then(matchSnapshot);
      }));

exports.render = render;
exports.matchSnapshot = matchSnapshot;
exports.$$Promise = $$Promise$1;
/*  Not a pure module */
